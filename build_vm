#! /bin/sh
set -euo pipefail

PACKER_CACHE_DIR=${PACKER_CACHE_DIR:-./packer_cache}
target=${PACKER_TARGET:-alt-server}
arch=${PACKER_ARCH:-x86_64}
BASE_VERSION=${PACKER_BASE_VERSION:-9}
TARGET_VERSION=${PACKER_TARGET_VERSION:-9}
headless=${PACKER_HEADLESS:-false}
VM_TYPE=${PACKER_VM_TYPE:-qemu}
IMAGE_FILENAME=${PACKER_IMAGE_FILENAME:-alt-server-10-onebula-x86_64}
EXTENSION=${EXTENSION:-qcow2}
BUILD_DATE=${PACKER_BUILD_DATE:-""}
BUILD_DATE_FULL=${PACKER_BUILD_DATE_FULL:-""}
GIT_TAG=${PACKER_GIT_TAG:-""}
GIT_HASH=${PACKER_GIT_HASH:-""}
# For vsphere builder only
VCENTER_SERVER=${PACKER_VCENTER_SERVER:-""}
VSPHERE_HOST=${PACKER_VSPHERE_HOST:-""}
VSPHERE_USER=${PACKER_VSPHERE_USER:-""}
VSPHERE_PASSWORD=${PACKER_VSPHERE_PASSWORD:-""}
# For openuds-actor builder only
OPENUDS_ACTOR_SSL_VALIDATION=${PACKER_OPENUDS_ACTOR_SSL_VALIDATION:-"no"}
OPENUDS_HOST=${PACKER_OPENUDS_HOST:-"udshost"}
OPENUDS_AUTHENTICATOR=${PACKER_OPENUDS_AUTHENTICATOR:-"admin"}
OPENUDS_USERNAME=${PACKER_OPENUDS_USERNAME:-"root"}
OPENUDS_PASSWORD=${PACKER_OPENUDS_PASSWORD:-"udsmam0"}
OPENUDS_ACTOR_PRE_CONNECT=${PACKER_OPENUDS_ACTOR_PRE_CONNECT:-""}
OPENUDS_ACTOR_RUN_ONCE=${PACKER_OPENUDS_ACTOR_RUN_ONCE:-""}
OPENUDS_ACTOR_POST_CONFIG=${PACKER_OPENUDS_ACTOR_POST_CONFIG:-""}
OPENUDS_ACTOR_LOG_LEVEL=${PACKER_OPENUDS_ACTOR_LOG_LEVEL:-"error"}


if [[ "${VM_TYPE}" =~ ^(qemu|vagrant-qemu|cloud|onebula|openuds-actor)$ ]]; then
	EXTENSION="qcow2"
fi

if [[ "${VM_TYPE}" =~ ^(vbox|vagrant-vbox)$ ]]; then
        EXTENSION="ova"
fi

# on-error may be:
# - abort - stop and leave everything "as is"
# - cleanup - is the default behavior
# - ask - ask what to do
onerror=${onerror:-cleanup}
build_command="packer build -var-file=config/common.json -on-error=${onerror}"

# Check that the variable is set to correct value
# $1 - variable name
# $2 - variable value
# $* - list of all possible values
assert_value() {
	variable_name="${1}"
	variable_value="${2}"
	shift 2
	possible_values="$*"
	comparison_success=false

	echo "CHECKING: ${variable_name}, must be one of: ${possible_values}"

	for pval in ${possible_values}; do
		if test "${variable_value}" == "${pval}"; then
			comparison_success=true
			break
		fi
	done

	if test "${comparison_success}" == "true"; then
		echo "CHECKING: ${variable_name}, SUCCESS"
		return 0
	else
		echo "CHECKING: ${variable_name}, FAIL"
		return 1
	fi
}

main() {
	assert_value target ${target} alt-server alt-workstation alt-kworkstation
	assert_value arch ${arch} i586 x86_64
	assert_value headless ${headless} true false
	assert_value BASE_VERSION ${BASE_VERSION} '8sp' '8sp-yandex' '10' '10.1' '10.2' '10.1-vmware' '10-yandex' '10.1-yandex' 'c10f1' 'c10f1-vmware' 'sisyphus'
	assert_value TARGET_VERSION ${TARGET_VERSION} '8sp' '8sp-yandex' '10' '10.1' '10.2' '10.1-vmware' '10-yandex' '10.1-yandex' 'c10f1' 'c10f1-vmware' 'sisyphus'
	assert_value VM_TYPE ${VM_TYPE} qemu onebula vbox vagrant-qemu vagrant-vbox cloud vsphere openuds-actor
	assert_value onerror ${onerror} ask cleanup abort

	if test "${BASE_VERSION}" == "sisyphus"; then
		TARGET_VERSION="sisyphus"
	fi

	# Generate image version info file
	env \
		IMAGE_FILENAME="${IMAGE_FILENAME}" \
		GIT_TAG="${GIT_TAG}" \
		GIT_HASH="${GIT_HASH}" \
		BUILD_DATE_FULL="${BUILD_DATE_FULL}" \
		scripts/version

	# Clean previously generated hashes
	rm -rf results/${IMAGE_FILENAME}.md5
	rm -rf results/${IMAGE_FILENAME}.sha1

	# Run packer binary
	env \
		PACKER_CACHE_DIR="${PACKER_CACHE_DIR}" \
		PACKER_TARGET="${target}" \
		PACKER_BASE_VERSION="${BASE_VERSION}" \
		PACKER_ARCH="${arch}" \
		PACKER_HEADLESS="${headless}" \
		PACKER_LOG=1 \
		PACKER_TARGET_VERSION="${TARGET_VERSION}" \
		PACKER_VM_TYPE="${VM_TYPE}" \
		PACKER_IMAGE_FILENAME="${IMAGE_FILENAME}" \
		PACKER_VCENTER_SERVER="${VCENTER_SERVER}" \
		PACKER_VSPHERE_HOST="${VSPHERE_HOST}" \
		PACKER_VSPHERE_USER="${VSPHERE_USER}" \
		PACKER_VSPHERE_PASSWORD="${VSPHERE_PASSWORD}" \
		PACKER_OPENUDS_ACTOR_SSL_VALIDATION="${OPENUDS_ACTOR_SSL_VALIDATION}" \
		PACKER_OPENUDS_HOST="${OPENUDS_HOST}" \
		PACKER_OPENUDS_AUTHENTICATOR="${OPENUDS_AUTHENTICATOR}" \
		PACKER_OPENUDS_USERNAME="${OPENUDS_USERNAME}" \
		PACKER_OPENUDS_PASSWORD="${OPENUDS_PASSWORD}" \
		PACKER_OPENUDS_ACTOR_PRE_CONNECT="${OPENUDS_ACTOR_PRE_CONNECT}" \
		PACKER_OPENUDS_ACTOR_RUN_ONCE="${OPENUDS_ACTOR_RUN_ONCE}" \
		PACKER_OPENUDS_ACTOR_POST_CONFIG="${OPENUDS_ACTOR_POST_CONFIG}" \
		PACKER_OPENUDS_ACTOR_LOG_LEVEL="${OPENUDS_ACTOR_LOG_LEVEL}" \
		${build_command} -force -var-file=config/${target}-${BASE_VERSION}-${arch}.json -only=${VM_TYPE}-vm build.json

	if test "${VM_TYPE}" == "vsphere"; then
		cp -rf scripts/build/image-version results/${IMAGE_FILENAME}.txt

		# Copy generated image and other files to images dir
		mkdir -p images/manifests
		mkdir -p images/${IMAGE_FILENAME}
		mv -f results/${IMAGE_FILENAME}.txt images/manifests/
		mv -f results/${IMAGE_FILENAME}* images/${IMAGE_FILENAME}/
	else
		# Add hashes to previously generated manifest and copy it to images dir
		echo "MD5: $(cat results/${IMAGE_FILENAME}.md5)" >> scripts/build/image-version
		echo "SHA1: $(cat results/${IMAGE_FILENAME}.sha1)" >> scripts/build/image-version
		cp -rf scripts/build/image-version results/${IMAGE_FILENAME}.txt

		# Copy generated image and other files to images dir
		mkdir -p images/manifests
		mv -f results/${IMAGE_FILENAME}.md5 images/manifests/
		mv -f results/${IMAGE_FILENAME}.sha1 images/manifests/
		mv -f results/${IMAGE_FILENAME}.txt images/manifests/
		mv -f results/${IMAGE_FILENAME}.* images/
	fi
}

main

