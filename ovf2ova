#!/usr/bin/env python3

import argparse
import tarfile
import xml.etree.ElementTree as ET
from pathlib import Path


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("source_ovf_filepath")
    parser.add_argument("target_ova_filepath")
    return parser.parse_args()


def main():
    args = parse_args()

    with tarfile.open("ovftool-made.ova", mode="r", debug=3) as f:
        print("=== ovftool-made.ova ===")
        f.list()

    def reset_owner(tarinfo):
        tarinfo.uid = 64
        tarinfo.gid = 64
        tarinfo.uname = "someone"
        tarinfo.gname = "someone"
        return tarinfo

    ovf_path = Path(args.source_ovf_filepath)
    ova_path = Path(args.target_ova_filepath)
    base_name = ova_path.with_suffix("")
    disk_path = Path(str(ovf_path.with_suffix("")) + "-disk-0.vmdk")
    new_disk_path = Path(str(base_name) + "-disk-0.vmdk")

    if ovf_path.name != ova_path.name:
        namespaces = {
            "cim": "http://schemas.dmtf.org/wbem/wscim/1/common",
            "ovf": "http://schemas.dmtf.org/ovf/envelope/1",
            "rasd": "http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData",
            "vmw": "http://www.vmware.com/schema/ovf",
            "vssd": "http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData",
            "xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "": "http://schemas.dmtf.org/ovf/envelope/1",
        }

        for ns, uri in namespaces.items():
            ET.register_namespace(ns, uri)

        tree = ET.parse(args.source_ovf_filepath)
        root = tree.getroot()

        file_entry = root.find(
            f"References/File[@ovf:href='{disk_path.name}']", namespaces
        )
        if file_entry is None:
            raise RuntimeError("Failed to find vmdk file reference in ovf")
        file_entry.set(f"{{{namespaces['ovf']}}}href", f"{new_disk_path.name}")

        virtual_system = root.find("VirtualSystem", namespaces)
        if virtual_system is None:
            raise RuntimeError("Failed to find VirtualSystem")
        virtual_system.set(f"{{{namespaces['ovf']}}}id", f"{base_name.name}")

        name = virtual_system.find("Name", namespaces)
        if name is None:
            raise RuntimeError("Failed to find Name")
        name.text = base_name.name

        virt_sys_id = virtual_system.find(
            "VirtualHardwareSection/System/vssd:VirtualSystemIdentifier", namespaces
        )
        if virt_sys_id is None:
            raise RuntimeError("Failed to find VirtualSystemIdentifier")
        virt_sys_id.text = base_name.name

        extra_config = root.find(
            "VirtualSystem/VirtualHardwareSection/vmw:ExtraConfig[@vmw:key='nvram']",
            namespaces,
        )
        if extra_config is None:
            raise RuntimeError("Failed to find ExtraConfig")

        extra_config.set(f"{{{namespaces['vmw']}}}value", f"{base_name.name}.nvram")

        tree.write(
            f"{ova_path.stem}.ovf",
            encoding="UTF-8",
            xml_declaration=True,
        )

    mf_path = ovf_path.with_suffix(".mf")

    with tarfile.open(args.target_ova_filepath, mode="w", debug=3) as f:
        f.add(
            f"{ova_path.stem}.ovf", arcname=f"{ova_path.stem}.ovf", filter=reset_owner
        )
        f.add(mf_path, arcname=mf_path.name, filter=reset_owner)
        f.add(disk_path, arcname=f"{new_disk_path.name}", filter=reset_owner)


if __name__ == "__main__":
    main()
